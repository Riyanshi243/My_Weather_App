{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","cityName","setCityName","current","setCurrent","location","setlocation","dayArray","setDayArray","loading","setLoading","curr","setCurr","daysName","Date","0","1","2","3","4","5","6","className","type","placeholder","onChange","e","target","value","style","height","width","marginRight","borderRadius","onClick","url","axios","get","then","result","console","log","data","_forecast","forecast","newArr","forecastday","forEach","elem","obj","day","date","getDay","max","maxtemp_c","min","mintemp_c","avg","avgtemp_c","maxf","maxtemp_f","minf","mintemp_f","avgf","avgtemp_f","humidity","avghumidity","cond","condition","text","cond_icon","icon","sunrise","astro","moonrise","sunset","moonset","moonphase","moon_phase","push","catch","error","alert","message","getweatherForecast","color","temp_c","temp_f","src","paddingLeft","region","country","localtime","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f2e494d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport axios from 'axios';\nimport Loader from 'react-loader-spinner';\nimport './App.css';\n\n\nconst App = () => {\n  const [cityName,setCityName] = useState(\"\");\n  const [current, setCurrent] = useState({});\n  const [location, setlocation] = useState({});\n  const [dayArray, setDayArray] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [curr, setCurr] = useState(false);\n\n  const date = new Date();\n  const daysName = {\n    0: \"Sunday\",\n    1: \"Monday\",\n    2: \"Tuesday\",\n    3: \"Wednesday\",\n    4: \"Thursday\",\n    5: \"Friday\",\n    6: \"Saturday\",\n  };\n\n  const getweatherForecast = () => {\n    if(!cityName){\n       return;\n    }\n    setLoading(true);\n    setCurr(false);\n    setDayArray([]);\n    setCurrent([]);\n    const url = \"http://api.weatherapi.com/v1/forecast.json?key=36497fdfe8694866925141606202810&days=6&q=\" + cityName;\n    axios.get(url).then((result) => {\n      setLoading(false);\n      setCurr(false);\n      console.log(\"result\", result.data);\n      if(result.data){\n        setCurrent(result.data.current);\n        setlocation(result.data.location);\n        const _forecast = result.data.forecast;\n        const newArr = [];\n        _forecast.forecastday.forEach((elem) => {\n          const obj = {};\n          const day = new Date(elem.date).getDay();\n          obj.day = daysName[day];\n          obj.max = elem.day.maxtemp_c;\n          obj.min = elem.day.mintemp_c;\n          obj.avg = elem.day.avgtemp_c;\n          obj.maxf = elem.day.maxtemp_f;\n          obj.minf = elem.day.mintemp_f;\n          obj.avgf = elem.day.avgtemp_f;\n          obj.date = elem.date;\n          obj.humidity = elem.day.avghumidity;\n          obj.cond = elem.day.condition.text;\n          obj.cond_icon = \"https:\"+ elem.day.condition.icon;\n          obj.sunrise= elem.astro.sunrise;\n          obj.moonrise= elem.astro.moonrise;\n          obj.sunset=elem.astro.sunset;\n          obj.moonset=elem.astro.moonset;\n          obj.moonphase=elem.astro.moon_phase;\n          newArr.push(obj);\n        });\n\n        setDayArray(newArr);\n        setCurr(true);\n      }\n    })\n    .catch((error)=>{\n      setLoading(false);\n      setCurr(false);\n      alert(error.message);\n    });\n  };\n  \n   return(\n    \n    <div className = \"App\">\n      <div className = \"Header\">\n      Weather Forecast App</div>\n      \n        <div className=\"SearchContainer\">\n            <input \n              type=\"text\" \n              placeholder=\"Search City\" \n              onChange={(e) => {\n                setCityName(e.target.value);\n              }}\n              style={{ height:\"30px\", width:\"200px\" , marginRight:\"20px\" ,borderRadius:\"5px\" }}\n            />\n            <input type=\"button\" value=\"Search\" \n             onClick={() =>{getweatherForecast();}}\n            style={{ height:\"30px\",width:\"60px\",borderRadius:\"10px\" }}/>\n        </div>\n        <div className=\"CityName\">\n          <h2>Searching weather updates of : {cityName}</h2>\n        </div>\n       {loading ? (\n        <div className=\"Loader\">\n          <Loader type=\"ThreeDots\" color=\"#FF0000\" height={80} width={80} />\n        </div>) : null}\n        \n        {curr? (<div className=\"Card2\">\n            <h2>Current temp is {current.temp_c} &#8451; / {current.temp_f} &#8457; </h2>\n            <h2>{current.condition.text}\n            <img src={\"https:\"+ current.condition.icon} width=\"80\" height=\"60\" paddingLeft=\"200px\"/>\n            </h2>\n            <h2>Region is {location.region}</h2>\n            <h2>Country is {location.country}</h2>\n            <h2>Current local date and time is<br></br> {location.localtime}</h2>\n          </div>\n        ):null}\n\n         \n        {dayArray.map((e) => {\n          return(\n            <div className = \"Card\">\n             \n              <h3>{e.date} </h3>\n              <h3>{e.day}</h3>\n              <div className=\"TempText\">Min Temp: {e.min} &#8451; / {e.minf} &#8457;</div>\n              <div className=\"TempText\">Avg Temp: {e.avg } &#8451; / {e.avgf} &#8457;</div>\n             <div className=\"TempText\">Max Temp: {e.max} &#8451; / {e.maxf} &#8457;</div>\n             <div className=\"TempText\">Avg Humidity: {e.humidity} % </div>\n            <div className=\"TempText\">{e.cond} </div>\n            <img src={e.cond_icon}  width=\"100\" height=\"90\"/>\n            <div className=\"TempText\">Sunrise: {e.sunrise} </div>\n            <div className=\"TempText\">Sunset: {e.sunset} </div>\n            <div className=\"TempText\">Moonrise: {e.moonrise} </div>\n            <div className=\"TempText\">Moonset: {e.moonset} </div>\n            <div className=\"TempText\">Moon Phase: {e.moonphase} </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}